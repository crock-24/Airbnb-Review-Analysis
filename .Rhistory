matrix(c(1, 2, 3, 4, 5, 6, 7, 8), now = 4, ncol = 2)
example <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8), now = 4, ncol = 2)
matrix(c(1, 2, 3, 4, 5, 6, 7, 8), now = 4, ncol = 2)
example <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8), now = 4, ncol = 2)
1+1
example <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8), now = 4, ncol = 2)
example <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8), now = 4, ncol = 2)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
library(readr)
dataset <- read_csv(NULL)
install.packages("devtools")
sessionInfo()
sessionInfo()
sessionInfo()
sessionInfo()
help(package = "devtools")
install.packages("KernSmooth")
library(KernSmooth)
library(quantmod)
getSymbols('MSFT')
MSFT
head(MSFT)
MSFT.Open
MSFT.columns
Columns(MSFT)
values(MSFT)
colnames(MSFT)
class(MSFT)
MSFT.Open
MSFT.MSFT.Open
MSFT$MSFT.Open
knitr::opts_chunk$set(echo = TRUE)
plot(NYC.lm, which = 1)
?ncv.test
??ncv.test
??ncvtest
ncvTest
library(car)
house.prices <- read.csv('house.prices.csv')
setwd("/Users/crorick/Documents/MS\ Applied\ Stats\ Fall\ 2023/MA4710/Quizzes/week\ 7")
library(car)
house.prices <- read.csv('house.prices.csv')
houses <- read.csv('house.prices.csv')
colnames(houses) <- c('Taxes', 'Bathrooms', 'Size', 'LivingSpace', 'GarageStalls', + 'Rooms', 'Bedrooms', 'Age', 'Fireplaces', 'Price')
str(houses)
houses.lm <- lm(Y ~ ., data = houses)
houses
houses <- read.csv('house.prices.csv')
colnames(houses) <- c('Taxes', 'Bathrooms', 'Size', 'LivingSpace', 'GarageStalls', 'Rooms', 'Bedrooms', 'Age', 'Fireplaces', 'Price')
houses$Bathrooms <- as.factor(houses$Bathrooms)
houses
houses.lm <- lm(Y ~ ., data = houses)
setwd("/Users/crorick/Documents/MS\ Applied\ Stats\ Fall\ 2023/MA4710/Quizzes/week\ 7")
library(car)
houses <- read.csv('house.prices.csv')
colnames(houses) <- c('Taxes', 'Bathrooms', 'Size', 'LivingSpace', 'GarageStalls', 'Rooms', 'Bedrooms', 'Age', 'Fireplaces', 'Price')
houses$Bathrooms <- as.factor(houses$Bathrooms)
# 1. Consider the full model (using all 9 variables as predictors in the model with Price
# as the response). There are multiple symptoms of collinearity in this model. One symptom is
# from the sign of the estimated coefficients attached to certain variables. Which variable(s)
# stand out as having estimated coefficients with a sign (positive or negative) that contradicts
# your expectations?
houses.lm <- lm(Price ~ ., data = houses)
coef(houses)
coef(houses.lm)
library(leaps)
houses.rs <- regsubsets(Price ~ ., houses)
houses.rs <- regsubsets(Price ~ ., houses, nbest = 2, nvmax=9)
plot(houses.rs, scale = 'Cp')
subsets(houses.rs, statistic='Cp', legend=FALSE)
subsets(houses.rs, statistic='cp', legend=FALSE)
abline(a=1, b=1, col='red', lty='dashed', lwd=3)
subsets(houses.rs, statistic='cp', legend='topright')
subsets(houses.rs, statistic='cp', legend='false', ylim = c(0,10))
abline(a=1, b=1, col='red', lty='dashed', lwd=3)
subsets(houses.rs, statistic='cp', legend='F', ylim = c(0,10))
subsets(houses.rs, statistic='cp', legend='FALSE', ylim = c(0,10))
subsets(houses.rs, statistic='cp', legend='False', ylim = c(0,10))
subsets(houses.rs, statistic='cp', ylim = c(0,10))
abline(a=1, b=1, col='red', lty='dashed', lwd=3)
abline(a=1, b=1, col='red', lty='dashed', lwd=3)
subsets(houses.rs, statistic='cp', ylim = c(0,10))
abline(a=1, b=1, col='red', lty='dashed', lwd=3)
subsets(houses.rs, statistic='cp', legend = FALSE, ylim = c(0,10))
abline(a=1, b=1, col='red', lty='dashed', lwd=3)
abline(a=1, b=1, col='red', lty='dashed', lwd=3)
abline(a=1, b=1, col='red', lty='dashed', lwd=3)
abline(a=1, b=1, col='red', lty='dashed', lwd=3)
abline(a=1, b=1, col='red', lty='dashed', lwd=3)
abline(a=1, b=1, col='red', lty='dashed', lwd=3)
abline(a=1, b=1, col='red', lty='dashed', lwd=d)
subsets(houses.rs, statistic='cp', legend = FALSE, ylim = c(0,10))
abline(a=1, b=1, col='red', lty='dashed', lwd=2)
subsets(houses.rs, statistic='cp', legend = FALSE, ylim = c(0,10))
abline(a=1, b=1, col='red', lty='dashed', lwd=2)
subsets(houses.rs, statistic='R2', legend = FALSE, ylim = c(0,10))
subsets(houses.rs, statistic='rsq', legend = FALSE, ylim = c(0,10))
subsets(houses.rs, statistic='rsq', legend = FALSE, ylim = c(0,1))
subsets(houses.rs, statistic='rsq', legend = FALSE, ylim = c(0.6,0.9))
subsets(houses.rs, statistic='rsq', legend = FALSE, ylim = c(0.8,0.9))
subsets(houses.rs, statistic='rsqadj', legend = FALSE, ylim = c(0.8,0.9))
# 5. Use the subsets function to plot R2 for the best subsets in the model.
# Identify the model with the largest value of R2adj
subsets(houses.rs, statistic='adjr2', legend = FALSE, ylim = c(0.8,0.9))
subsets(houses.rs, statistic='adjr2', legend = FALSE, ylim = c(0.75,0.8))
subsets(houses.rs, statistic='adjr2', legend = FALSE, ylim = c(0.77,0.8))
summary(houses.rs)
step(houses.lm, statistic = 'AIC', direction='forward')
houses.null <- lm(Price ~ 1, houses)
step(houses.null, scope=formula(houses.lm), statistic = 'AIC', direction='forward')
houses.null <- lm(Price ~ 1, houses)
step(houses.null, scope=formula(houses.lm), direction='forward')
?step
step(houses.lm, direction='both')
houses.null <- lm(Price ~ 1, houses)
step(houses.null, scope=formula(houses.lm), direction='forward')
log(1)
log(0.1)
step(houses.lm, direction='both')
lm(Price ~ Taxes + Bathrooms + GarageStalls + Bedrooms, data = houses)
summary(lm(Price ~ Taxes + Bathrooms + GarageStalls + Bedrooms, data = houses))
houses.step.lm <- lm(Price ~ Taxes + Bathrooms + GarageStalls + Bedrooms, data = houses)
VIF(houses.step.lm)
library(car)
VIF(houses.step.lm)
vif(houses.step.lm)
summary(houses.step.lm)
?step
step(NYC.null, scope=formula(NYC.lm), direction='backward')
setwd("/Users/crorick/Documents/MS\ Applied\ Stats\ Fall\ 2023/MA4710/Course\ Project")
library(car)
library(leaps)
#Load in NYC Airbnb data
NYC <- read.csv('AB_NYC_2019.csv')
NYC <- subset(NYC, select = -c(latitude,longitude, last_review, host_id, neighbourhood, host_name, name, id))
NYC <- na.omit(NYC)
#Make reviews per month reviews per year instead
NYC$reviews_per_year <- NYC$reviews_per_month * 12
#Reducing the data points down to a random sample of 1000 for better and
# faster processing
NYC <- NYC[sample(nrow(NYC), 1000), ]
#There is not enough data on staten Island so removing it from the data
NYC <- NYC[!(NYC$neighbourhood_group == 'Staten Island'),]
#make sure factor variables are in data as factors
NYC$neighbourhood_group <- as.factor(NYC$neighbourhood_group)
NYC$room_type <- as.factor(NYC$room_type)
# 1 You will look at a variety of ways to detect the presence of collinearity in
# your set of numerical predictors. Include "all" predictors from your data set in a full model,
# with the following caveats:
NYC.lm <- lm(reviews_per_year  ~ calculated_host_listings_count + price + minimum_nights + availability_365 + number_of_reviews + neighbourhood_group + room_type, NYC)
# 2 Assess this full model for problems with collinearity by calculating the VIF's for
# each variable and the condition number (remember to scale the variables); you can
# use the crude rules of thumb mentioned in your book and notes.
#fuel.pc <- prcomp(~ . - Y, fuel, scale=T)
#fuel.pc.sdev <- fuel.pc$sdev
#fuel.pc.sdev[1] / fuel.pc.sdev
mat.data.pc <- model.matrix(~ . - reviews_per_year + 0, NYC)
NYC.pc <- prcomp(mat.data.pc, scale=T)
NYC.pc.sdev <- NYC.pc$sdev
NYC.con.ind <- NYC.pc.sdev[1] / NYC.pc.sdev
print(max(NYC.con.ind))
vif(NYC.lm)
# 3 In your summary, explain the reasoning you use in coming to a decision if there
# is a
NYC.null <- lm(reviews_per_year ~ 1, NYC)
step(NYC.null, scope=formula(NYC.lm), direction='forward')
step(NYC.lm, direction='both')
step(NYC.lm, direction='backward')
step(NYC.lm, direction='backward')
step(NYC.lm, direction='both')
step(NYC.null, scope=formula(NYC.lm), direction='forward')
step(NYC.null, scope=formula(NYC.lm), direction='forward')
?regsubsets
NYC.rs <- regsubsets(reviews_per_year ~ ., NYC, nbest = 2, nvmax=9)
plot(NYC.rs, scale = 'Cp')
step(NYC.lm, direction='backward')
step(NYC.lm, direction='both')
step(NYC.null, scope=formula(NYC.lm), direction='forward')
vif(NYC.lm)
str(NYC)
subsets(NYC.rs, statistic='cp', legend = FALSE, ylim = c(0,10))
abline(a=1, b=1, col='red', lty='dashed', lwd=2)
subsets(NYC.rs, statistic='cp', legend = FALSE, ylim = c(1,10), xlim = c(4,8))
subsets(NYC.rs, statistic='cp', legend = FALSE, ylim = c(1,10), xlim = c(5,8))
abline(a=1, b=1, col='red', lty='dashed', lwd=2)
subsets(NYC.rs, statistic='adjr2', legend = FALSE, ylim = c(0,1), xlim = c(1,8))
subsets(NYC.rs, statistic='adjr2', legend = FALSE, ylim = c(0.9,1), xlim = c(1,8))
subsets(NYC.rs, statistic='adjr2', legend = FALSE, ylim = c(0.9,1), xlim = c(1,8))
subsets(NYC.rs, statistic='adjr2', legend = FALSE, ylim = c(0.99,1), xlim = c(1,8))
NYC.rs <- regsubsets(reviews_per_year ~ . - reviews_per_month, NYC, nbest = 1, nvmax=9)
subsets(NYC.rs, statistic='cp', legend = FALSE, ylim = c(1,10), xlim = c(5,8))
abline(a=1, b=1, col='red', lty='dashed', lwd=2)
subsets(NYC.rs, statistic='cp', legend = FALSE, ylim = c(1,10), xlim = c(3,10))
abline(a=1, b=1, col='red', lty='dashed', lwd=2)
subsets(NYC.rs, statistic='adjr2', legend = FALSE, ylim = c(0.95,1), xlim = c(1,8))
subsets(NYC.rs, statistic='adjr2', legend = FALSE, ylim = c(0,1), xlim = c(1,8))
subsets(NYC.rs, statistic='adjr2', legend = FALSE, ylim = c(0.2,0.4), xlim = c(1,8))
subsets(NYC.rs, statistic='adjr2', legend = FALSE, ylim = c(0.2,0.3), xlim = c(1,8))
subsets(NYC.rs, statistic='adjr2', legend = FALSE, ylim = c(0.2,0.4), xlim = c(1,8))
subsets(NYC.rs, statistic='adjr2', legend = FALSE, ylim = c(0.25, 0.35), xlim = c(1,8))
subsets(NYC.rs, statistic='adjr2', legend = FALSE, ylim = c(0.25, 0.3), xlim = c(1,8))
subsets(NYC.rs, statistic='adjr2', legend = FALSE, ylim = c(0.28, 0.33), xlim = c(1,8))
subsets(NYC.rs, statistic='adjr2', legend = FALSE, ylim = c(0.31, 0.33), xlim = c(1,8))
subsets(NYC.rs, statistic='adjr2', legend = FALSE, ylim = c(0.31, 0.33), xlim = c(1,8))
subsets(NYC.rs, statistic='adjr2', legend = FALSE, ylim = c(0.31, 0.325), xlim = c(1,8))
subsets(NYC.rs, statistic='adjr2', legend = FALSE, ylim = c(0.31, 0.322), xlim = c(1,8))
subsets(NYC.rs, statistic='adjr2', legend = FALSE, ylim = c(0.315, 0.32), xlim = c(1,8))
subsets(NYC.rs, statistic='adjr2', legend = FALSE, ylim = c(0.315, 0.3195), xlim = c(1,8))
subsets(NYC.rs, statistic='adjr2', legend = FALSE, ylim = c(0.31, 0.3195), xlim = c(1,8))
subsets(NYC.rs, statistic='adjr2', legend = FALSE, ylim = c(0.312, 0.3195), xlim = c(1,8))
subsets(NYC.rs, statistic='adjr2', legend = FALSE, ylim = c(0.31, 0.3195), xlim = c(1,8))
subsets(NYC.rs, statistic='adjr2', legend = FALSE, ylim = c(0.31, 0.319), xlim = c(1,8))
subsets(NYC.rs, statistic='adjr2', legend = FALSE, ylim = c(0.315, 0.319), xlim = c(1,8))
subsets(NYC.rs, statistic='adjr2', legend = FALSE, ylim = c(0.316, 0.3195), xlim = c(1,8))
subsets(NYC.rs, statistic='adjr2', legend = FALSE, ylim = c(0.3165, 0.3195), xlim = c(1,8))
subsets(NYC.rs, statistic='adjr2', legend = FALSE, ylim = c(0.3165, 0.3192), xlim = c(1,8))
subsets(NYC.rs, statistic='adjr2', legend = FALSE, ylim = c(0.3165, 0.3192), xlim = c(2,8))
subsets(NYC.rs, statistic='cp', legend = FALSE, ylim = c(1,10), xlim = c(3,10))
subsets(NYC.rs, statistic='cp', legend = FALSE, ylim = c(1,9), xlim = c(3,19))
subsets(NYC.rs, statistic='cp', legend = FALSE, ylim = c(1,9), xlim = c(3,9))
plot(NYC.rs)
plot(NYC.rs, scale = 'adjr2')
NYC.rs <- regsubsets(reviews_per_year ~ . - reviews_per_month, NYC, nbest = 1, nvmax=9)
subsets(NYC.rs, statistic='cp', legend = FALSE, ylim = c(1,9), xlim = c(3,9))
abline(a=1, b=1, col='red', lty='dashed', lwd=2)
subsets(NYC.rs, statistic='adjr2', legend = FALSE, ylim = c(0.3165, 0.3192), xlim = c(2,8))
plot(NYC.rs, scale = 'adjr2')
subsets(NYC.rs, statistic='cp', legend = FALSE, ylim = c(1,9), xlim = c(3,9))
?regsubsets
subsets(NYC.rs, statistic='cp', legend = FALSE, ylim = c(1,9), xlim = c(3,9))
abline(a=1, b=1, col='red', lty='dashed', lwd=2)
subsets(NYC.rs, statistic='adjr2', legend = FALSE, ylim = c(0.3165, 0.3192), xlim = c(2,8))
plot(NYC.rs, scale = 'adjr2')
subsets(NYC.rs, statistic='cp', legend = FALSE, ylim = c(1,9), xlim = c(3,9))
abline(a=1, b=1, col='red', lty='dashed', lwd=2)
mat.data.pc <- model.matrix(~ . - reviews_per_year - reviews_per_month + 0, NYC)
NYC.pc <- prcomp(mat.data.pc, scale=T)
NYC.pc.sdev <- NYC.pc$sdev
NYC.con.ind <- NYC.pc.sdev[1] / NYC.pc.sdev
NYC.con.ind
print(max(NYC.con.ind))
summary(NYC.rs)
NYC.lm <- lm(reviews_per_year  ~ minimum_nights + availability_365 + number_of_reviews + neighbourhood_group + room_type, NYC)
subsets(NYC.rs, statistic='cp', legend = FALSE, ylim = c(1,9), xlim = c(3,9))
abline(a=1, b=1, col='red', lty='dashed', lwd=2)
step(NYC.lm, direction='both')
plot(NYC.rs, scale = 'adjr2')
NYC.lm2 <- lm(reviews_per_year  ~ minimum_nights + availability_365 + number_of_reviews, NYC)
ols_mallows_cp(NYC.lm2, NYC.lm)
library(ols)
ols_mallows_cp(NYC.lm2, NYC.lm)
library(ols)
library(olsrr)
NYC.lm2 <- lm(reviews_per_year  ~ minimum_nights + availability_365 + number_of_reviews, NYC)
ols_mallows_cp(NYC.lm2, NYC.lm)
NYC.lm2 <- lm(reviews_per_year  ~ minimum_nights + availability_365 + number_of_reviews + neighbourhood_group, NYC)
ols_mallows_cp(NYC.lm2, NYC.lm)
NYC.lm2 <- lm(reviews_per_year  ~ minimum_nights + availability_365 + number_of_reviews + room_type, NYC)
ols_mallows_cp(NYC.lm2, NYC.lm)
NYC.lm2 <- lm(reviews_per_year  ~ minimum_nights + availability_365 + number_of_reviews + price, NYC)
ols_mallows_cp(NYC.lm2, NYC.lm)
NYC.lm2 <- lm(reviews_per_year  ~ minimum_nights + availability_365 + number_of_reviews + calculated_host_listings, NYC)
NYC.lm2 <- lm(reviews_per_year  ~ minimum_nights + availability_365 + number_of_reviews, NYC)
ols_mallows_cp(NYC.lm2, NYC.lm)
NYC.lm2 <- lm(reviews_per_year  ~ minimum_nights + availability_365 + number_of_reviews + calculated_host_listings_count, NYC)
ols_mallows_cp(NYC.lm2, NYC.lm)
plot(NYC.rs, scale = 'adjr2')
plot(NYC.rs, scale = 'sqr')
plot(NYC.rs, scale = 'cp')
plot(NYC.rs, scale = 'Cp')
plot(NYC.lm2, which = 3)
NYC.lm2 <- lm(reviews_per_year  ~ minimum_nights + availability_365 + number_of_reviews + calculated_host_listings_count, NYC, weights = minimum_nights)
plot(NYC.lm2, which = 3)
plot(NYC.lm, which = 3)
NYC.lm3 <- lm(reviews_per_year  ~ minimum_nights + availability_365 + number_of_reviews + calculated_host_listings_count, NYC, weights = minimum_nights^2)
summary(NYC.lm3)
NYC.lm3 <- lm(reviews_per_year  ~ minimum_nights + availability_365 + number_of_reviews + calculated_host_listings_count, NYC, weights = minimum_nights)
summary(NYC.lm3)
NYC.lm3 <- lm(reviews_per_year  ~ minimum_nights + availability_365 + number_of_reviews + calculated_host_listings_count, NYC, weights = availability_365^2)
summary(NYC.lm3)
NYC.lm3 <- lm(reviews_per_year  ~ minimum_nights + availability_365 + number_of_reviews + calculated_host_listings_count, NYC, weights = minimum_nights^2)
summary(NYC.lm3)
plot(NYC.lm3, which = 1)
plot(NYC.lm, which = 3)
plot(NYC.lm3, which = 3)
plot(rstandard(NYC.lm3), NYC.lm3$fitted.values)
plot(NYC.lm3$fitted.values, rstandard(NYC.lm3))
plot(NYC.lm3, which = 3)
influencePlot(NYC.lm3)
mat.data.pc <- model.matrix(~ minimum_nights + availability_365 + number_of_reviews + calculated_host_listings_count + 0, NYC)
NYC.pc <- prcomp(mat.data.pc, scale=T)
NYC.pc
NYC.pc.sdev <- NYC.pc$sdev
NYC.con.ind <- NYC.pc.sdev[1] / NYC.pc.sdev
print(max(NYC.con.ind))
vif(NYC.lm)
summary(NYC.lm3)
knitr::opts_chunk$set(echo = TRUE)
NYC.lm2 <- lm(reviews_per_year  ~ minimum_nights + availability_365 + number_of_reviews + calculated_host_listings_count, NYC)
summary(NYC.lm2)
cat("Mallow's Cp value: \n")
cat(ols_mallows_cp(NYC.lm2, NYC.lm))
